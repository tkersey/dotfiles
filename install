#!/bin/sh
#
# bootstrap installs things.

DOTFILES_ROOT="$(pwd)"
LINKS_CONF="$DOTFILES_ROOT/links.conf"

# Default flags
DO_DOTFILES=false
DO_SYMLINK_FILES=false
DO_HOMEBREW=false
DO_ALL=true

# Process command line arguments
while [ $# -gt 0 ]; do
  case "$1" in
    --dotfiles)
      DO_DOTFILES=true
      DO_ALL=false
      ;;
    --symlink-files)
      DO_SYMLINK_FILES=true
      DO_ALL=false
      ;;
    --homebrew)
      DO_HOMEBREW=true
      DO_ALL=false
      ;;
    --help)
      echo "Usage: $0 [options]"
      echo "Options:"
      echo "  --dotfiles       Process .symlink files"
      echo "  --symlink-files  Process custom symlinks from links.conf"
      echo "  --homebrew       Run homebrew installation/update"
      echo "  --help           Show this help message"
      echo ""
      echo "If no options are specified, all tasks will be run."
      echo "If any options are specified, only those tasks will be run."
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      echo "Use --help for usage information"
      exit 1
      ;;
  esac
  shift
done

# If no specific flags were set, do everything
if [ "$DO_ALL" = true ]; then
  DO_DOTFILES=true
  DO_SYMLINK_FILES=true
  DO_HOMEBREW=true
fi

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_files () {
  mkdir -p $(dirname "$2")
  ln -s "$1" "$2"
  success "linked $1 to $2"
}

install_homebrew() {
	if [[ $(command -v brew) == "" ]]; then
		echo "Installing Homebrew.. "
		/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
	else
		echo "Updating Homebrew.. "
		brew update
	fi
}

install_dotfiles () {
  info 'installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in $(find "$DOTFILES_ROOT" -maxdepth 3 -name \*.symlink)
  do
    source_path=${source#"${DOTFILES_ROOT}/"}
    echo "$source_path"
    dest="$HOME/.${source_path%.*}"
    echo "$dest"

    if [ -f "$dest" ] || [ -d "$dest" ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" = "false" ] && [ "$backup_all" = "false" ] && [ "$skip_all" = "false" ]
      then
        user "File already exists: ${dest}, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        if [ -t 0 ]; then
          read -r action
        else
          read -r action < /dev/tty
        fi
        echo ''

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" = "true" ] || [ "$overwrite_all" = "true" ]
      then
        rm -rf "$dest"
        success "removed $dest"
      fi

      if [ "$backup" = "true" ] || [ "$backup_all" = "true" ]
      then
        mv "$dest" "$dest"\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" = "false" ] && [ "$skip_all" = "false" ]
      then
        setup_files "$source" "$dest" "$source_path"
      else
        success "skipped $dest"
      fi

    else
      setup_files "$source" "$dest" "$source_path"
    fi

  done
}

symlink_files() {
  info 'symlinking files and directories from links.conf'

  if [ ! -f "$LINKS_CONF" ]; then
    info "no custom links configuration found, skipping"
    return
  fi

  # Read each line from links.conf
  while IFS= read -r line || [ -n "$line" ]; do
    # Skip comments and empty lines
    if [[ "$line" =~ ^# ]] || [[ -z "${line// }" ]]; then
      continue
    fi

    # Split the line by the first colon
    source_path="${line%%:*}"
    dest_path="${line#*:}"

    # Trim whitespace
    source_path=$(echo "$source_path" | xargs)
    dest_path=$(echo "$dest_path" | xargs)

    # Strip quotes from dest_path if present
    dest_path=$(echo "$dest_path" | sed -e 's/^"//' -e 's/"$//')

    # Expand environment variables in destination path
    eval "dest_path=$dest_path"

    # Get full source path
    source="$DOTFILES_ROOT/$source_path"

    # Skip if source doesn't exist
    if [ ! -f "$source" ] && [ ! -d "$source" ]; then
      fail "Source not found: $source"
      continue
    fi


    if [ -f "$dest_path" ] || [ -d "$dest_path" ] || [ -L "$dest_path" ]; then
      # Handle existing files with simple skip/overwrite prompt
      overwrite=false
      skip=false

      user "Already exists: ${dest_path}, what do you want to do? [s]kip or [o]verwrite?"
      if [ -t 0 ]; then
        read -r action
      else
        read -r action < /dev/tty
      fi
      echo ''

      case "$action" in
        o|O )
          overwrite=true;;
        s|S|* )
          skip=true;;  # Default to skip for any other input
      esac

      if [ "$overwrite" = "true" ]; then
        rm -rf "$dest_path"
        success "removed $dest_path"
        setup_files "$source" "$dest_path"
      else
        success "skipped $dest_path"
      fi
    else
      setup_files "$source" "$dest_path"
    fi
  done < "$LINKS_CONF"
}


# Run installations based on flags
if [ "$DO_HOMEBREW" = true ]; then
  install_homebrew
  brew bundle
fi

if [ "$DO_DOTFILES" = true ]; then
  install_dotfiles
fi

if [ "$DO_SYMLINK_FILES" = true ]; then
  symlink_files
fi

# If we are on a mac, lets install and setup homebrew
if [ "$(uname -s)" == "Darwin" ] && [ "$DO_HOMEBREW" = true ]
then
  info "installing dependencies"
  if . bin/dot > /tmp/dotfiles-dot 2>&1
  then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi
fi

echo ''
echo '  All installed!'
